/home/feng/.nvm/versions/node/v18.13.0/bin/node --inspect ./gansu_samr/home_cookie.js
获取 Window 的属性：$_ts 值为：[object Object]
获取 Window 的属性：execScript 值为：undefined
获取 Window 的属性：eval 值为：function eval() { [native code] }
获取 Window 的属性：$_ts 值为：[object Object]
获取 Window 的属性：document 值为：[object document]
获取 Window 的属性：top 值为：[object Window]
获取 Window 的属性：setTimeout 值为：function setTimeout(callback, after, arg1, arg2, arg3) {
  validateFunction(callback, 'callback');

  let i, args;
  switch (arguments.length) {
    // fast cases
    case 1:
    case 2:
      break;
    case 3:
      args = [arg1];
      break;
    case 4:
      args = [arg1, arg2];
      break;
    default:
      args = [arg1, arg2, arg3];
      for (i = 5; i < arguments.length; i++) {
        // Extend array dynamically, makes .apply run much faster in v6.0.0
        args[i - 2] = arguments[i];
      }
      break;
  }

  const timeout = new Timeout(callback, after, args, false, true);
  insert(timeout, timeout._idleTimeout);

  return timeout;
}
获取 Window 的属性：setInterval 值为：function setInterval(callback, repeat, arg1, arg2, arg3) {
  validateFunction(callback, 'callback');

  let i, args;
  switch (arguments.length) {
    // fast cases
    case 1:
    case 2:
      break;
    case 3:
      args = [arg1];
      break;
    case 4:
      args = [arg1, arg2];
      break;
    default:
      args = [arg1, arg2, arg3];
      for (i = 5; i < arguments.length; i++) {
        // Extend array dynamically, makes .apply run much faster in v6.0.0
        args[i - 2] = arguments[i];
      }
      break;
  }

  const timeout = new Timeout(callback, repeat, args, true, true);
  insert(timeout, timeout._idleTimeout);

  return timeout;
}
获取 Window 的属性：eval 值为：function eval() { [native code] }
获取 Window 的属性：escape 值为：function escape() { [native code] }
获取 Window 的属性：Number 值为：function Number() { [native code] }
获取 Window 的属性：decodeURIComponent 值为：function decodeURIComponent() { [native code] }
获取 Window 的属性：isFinite 值为：function isFinite() { [native code] }
获取 Window 的属性：location 值为：[object location]
获取 Window 的属性：RegExp 值为：function RegExp() { [native code] }
获取 Window 的属性：$_ts 值为：[object Object]
获取 Window 的属性：clearInterval 值为：function clearInterval(timer) {
  // clearTimeout and clearInterval can be used to clear timers created from
  // both setTimeout and setInterval, as specified by HTML Living Standard:
  // https://html.spec.whatwg.org/multipage/timers-and-user-prompts.html#dom-setinterval
  clearTimeout(timer);
}
获取 Window 的属性：CollectGarbage 值为：undefined
获取 Window 的属性：DOMParser 值为：function DOMParser() {
    debugger;
}
获取 Window 的属性：ActiveXObject 值为：undefined
获取 Window 的属性：JSON 值为：[object JSON]
获取 Window 的属性：localStorage 值为：[object localStorage]
获取 Window 的属性：sessionStorage 值为：[object sessionStorage]
设置 localStorage 的属性：___TS___ 值为：___TS___
获取 localStorage 的属性：removeItem 值为：function removeItem(keyName) {
    delete this[keyName];
    console.log("removeItem -> ", keyName);
}
removeItem ->  ___TS___
设置 localStorage 的属性：__#classType 值为：localStorage
获取 document 的属性：createElement 值为：function createElement(tagName) {


    var result = { getElementsByTagName: getElementsByTagName };

    tagName = tagName.toLowerCase();
    switch (tagName) {
        case "div":
            Object.defineProperties(result, {
                [Symbol.toStringTag]: {
                    value: 'HTMLDivElement',
                    configurable: true
                }
            });
            break;
        default:
            Object.defineProperties(result, {
                [Symbol.toStringTag]: {
                    value: 'HTMLUnknownElement',
                    configurable: true
                }
            });
            break;
    }

    console.log("createElement " + tagName + "-> " + result);
    result = proxy(result);
    return result
}
createElement div-> [object HTMLDivElement]
获取 HTMLDivElement 的属性：getElementsByTagName 值为：function getElementsByTagName(name) {

    var result = [];
    Object.defineProperties(result, {
        [Symbol.toStringTag]: {
            value: 'HTMLCollection',
            configurable: true
        }
    });
    switch (name) {
        case "meta":
            var headElem = { removeChild: removeChild };
            Object.defineProperties(headElem, {
                [Symbol.toStringTag]: {
                    value: 'HTMLHeadElement',
                    configurable: true
                }
            });
            var metaElem = { content: window.content, getAttribute: getAttribute, parentNode: headElem };
            Object.defineProperties(metaElem, {
                [Symbol.toStringTag]: {
                    value: 'HTMLMetaElement ',
                    configurable: true
                }
            });
            result[0] = metaElem;
            break;
        case "script":
            var headElem = { removeChild: removeChild };
            Object.defineProperties(headElem, {
                [Symbol.toStringTag]: {
                    value: 'HTMLHeadElement',
                    configurable: true
                }
            });

            var ele = { getAttribute: getAttribute, parentElement: headElem };
            Object.defineProperties(ele, {
                [Symbol.toStringTag]: {
                    value: 'HTMLScriptElement',
                    configurable: true
                }
            });

            result[0] = ele;
            result[1] = ele;
            break;
    }
    console.log("getElementsByTagName " + name + "-> " + result);
    result = proxy(result);
    return result;
}
getElementsByTagName i->
设置 HTMLDivElement 的属性：innerHTML 值为：<!--[if gt IE 4]><i></i><![endif]-->
获取 HTMLCollection 的属性：0 值为：undefined
获取 Window 的属性：ActiveXObject 值为：undefined
获取 Window 的属性：msCrypto 值为：undefined
获取 document 的属性：getElementsByTagName 值为：function getElementsByTagName(name) {

    var result = [];
    Object.defineProperties(result, {
        [Symbol.toStringTag]: {
            value: 'HTMLCollection',
            configurable: true
        }
    });
    switch (name) {
        case "meta":
            var headElem = { removeChild: removeChild };
            Object.defineProperties(headElem, {
                [Symbol.toStringTag]: {
                    value: 'HTMLHeadElement',
                    configurable: true
                }
            });
            var metaElem = { content: window.content, getAttribute: getAttribute, parentNode: headElem };
            Object.defineProperties(metaElem, {
                [Symbol.toStringTag]: {
                    value: 'HTMLMetaElement ',
                    configurable: true
                }
            });
            result[0] = metaElem;
            break;
        case "script":
            var headElem = { removeChild: removeChild };
            Object.defineProperties(headElem, {
                [Symbol.toStringTag]: {
                    value: 'HTMLHeadElement',
                    configurable: true
                }
            });

            var ele = { getAttribute: getAttribute, parentElement: headElem };
            Object.defineProperties(ele, {
                [Symbol.toStringTag]: {
                    value: 'HTMLScriptElement',
                    configurable: true
                }
            });

            result[0] = ele;
            result[1] = ele;
            break;
    }
    console.log("getElementsByTagName " + name + "-> " + result);
    result = proxy(result);
    return result;
}
getElementsByTagName base->
获取 HTMLCollection 的属性：length 值为：0
获取 Window 的属性：addEventListener 值为：function addEventListener(type, listener) {
    console.log("addEventListener -> type: " + type + " listener: " + listener);
}
获取 Window 的属性：addEventListener 值为：function addEventListener(type, listener) {
    console.log("addEventListener -> type: " + type + " listener: " + listener);
}
addEventListener -> type: load listener: function _$dA(){var _$is=[10];Array.prototype.push.apply(_$is,arguments);return _$j9.apply(this,_$is);}
获取 Window 的属性：clearInterval 值为：function clearInterval(timer) {
  // clearTimeout and clearInterval can be used to clear timers created from
  // both setTimeout and setInterval, as specified by HTML Living Standard:
  // https://html.spec.whatwg.org/multipage/timers-and-user-prompts.html#dom-setinterval
  clearTimeout(timer);
}
设置 Window 的属性：clearInterval 值为：function _$eZ(){var _$jA=[175];Array.prototype.push.apply(_$jA,arguments);return _$aq.apply(this,_$jA);}
获取 Window 的属性：clearInterval 值为：function _$eZ(){var _$jA=[175];Array.prototype.push.apply(_$jA,arguments);return _$aq.apply(this,_$jA);}
获取 Window 的属性：document 值为：[object document]
获取 Window 的属性：name 值为：
获取 Window 的属性：localStorage 值为：[object localStorage]
获取 Window 的属性：globalStorage 值为：undefined
获取 Window 的属性：sessionStorage 值为：[object sessionStorage]
获取 Window 的属性：indexedDB 值为：[object IDBFactory]
获取 Window 的属性：top 值为：[object Window]
设置 Window 的属性：_$i0 值为：function _$mP(){var _$lP;if(_$lj)return;_$lj=1,_$ey(_$nC,_$hC[51],_$b8),_$lP=_$mC(),_$_1[335](_$iO[41],_$_1[336]()),_$h8(_$nC[_$cf[56]],_$dA);function _$dA(_$dA){var _$eN,_$bS,_$_C,_$mr,_$lR,_$ht;_$eN=_$cf[3],_$bS=_$_1[37][_$cf[26]](_$dA[_$cf[12]]);if(_$bS===_$cf[21])(_$eN=_$cf[43],_$_C=_$cz(_$dA), !_$_C|| !_$_C._$kl?_$aq(506,_$dA,_$eN,_$dA[_$cf[11]](_$eN)):_$lP||_$lz?_$aq(506,_$dA,_$eN,_$_C._$cx):0);else if(_$bS===_$cf[1])(_$eN=_$cf[14],_$_C=_$cz(_$dA), !_$_C|| !_$_C._$kl?_$aq(506,_$dA,_$eN,_$dA[_$cf[11]](_$eN)):_$lP||_$lz?_$aq(506,_$dA,_$eN,_$_C._$cx):_$dA[_$cf[13]](_$eN,_$fG[87]),_$mU(_$dA));else if(_$lP&&_$jC(_$dA,_$eN))(_$mr=_$dA[_$cf[11]](_$eN),_$aq(506,_$dA,_$eN,_$_1[333](_$mr)));else if(_$bS===_$cf[32]){if(_$dA[_$cf[11]](_$dl[54])===_$dl[59]){_$dA[_$dl[73]][_$fG[31]](_$dA);return true;}}else _$bS===_$cf[56]?_$_1[12]&&_$_1[12]<_$iO[12]?0:(_$lR=_$dA[_$cf[11]](_$cf[38]),_$lR?( typeof _$lR===_$cf[46]?_$lR=_$km(_$lR):0,_$ht=_$_f(_$lR,1),_$dA._$bZ=_$dA[_$cf[38]]=new _$_J(_$ht)):0):_$af(_$bS,_$dA);_$el(_$dA);return false;}}
获取 Window 的属性：setInterval 值为：function setInterval(callback, repeat, arg1, arg2, arg3) {
  validateFunction(callback, 'callback');

  let i, args;
  switch (arguments.length) {
    // fast cases
    case 1:
    case 2:
      break;
    case 3:
      args = [arg1];
      break;
    case 4:
      args = [arg1, arg2];
      break;
    default:
      args = [arg1, arg2, arg3];
      for (i = 5; i < arguments.length; i++) {
        // Extend array dynamically, makes .apply run much faster in v6.0.0
        args[i - 2] = arguments[i];
      }
      break;
  }

  const timeout = new Timeout(callback, repeat, args, true, true);
  insert(timeout, timeout._idleTimeout);

  return timeout;
}
获取 document 的属性：getElementsByTagName 值为：function getElementsByTagName(name) {

    var result = [];
    Object.defineProperties(result, {
        [Symbol.toStringTag]: {
            value: 'HTMLCollection',
            configurable: true
        }
    });
    switch (name) {
        case "meta":
            var headElem = { removeChild: removeChild };
            Object.defineProperties(headElem, {
                [Symbol.toStringTag]: {
                    value: 'HTMLHeadElement',
                    configurable: true
                }
            });
            var metaElem = { content: window.content, getAttribute: getAttribute, parentNode: headElem };
            Object.defineProperties(metaElem, {
                [Symbol.toStringTag]: {
                    value: 'HTMLMetaElement ',
                    configurable: true
                }
            });
            result[0] = metaElem;
            break;
        case "script":
            var headElem = { removeChild: removeChild };
            Object.defineProperties(headElem, {
                [Symbol.toStringTag]: {
                    value: 'HTMLHeadElement',
                    configurable: true
                }
            });

            var ele = { getAttribute: getAttribute, parentElement: headElem };
            Object.defineProperties(ele, {
                [Symbol.toStringTag]: {
                    value: 'HTMLScriptElement',
                    configurable: true
                }
            });

            result[0] = ele;
            result[1] = ele;
            break;
    }
    console.log("getElementsByTagName " + name + "-> " + result);
    result = proxy(result);
    return result;
}
getElementsByTagName script-> [object HTMLScriptElement],[object HTMLScriptElement]
获取 HTMLCollection 的属性：length 值为：2
获取 HTMLCollection 的属性：1 值为：[object HTMLScriptElement]
getAttribute r -> m
获取 HTMLCollection 的属性：1 值为：[object HTMLScriptElement]
获取 HTMLCollection 的属性：1 值为：[object HTMLScriptElement]
removeChild -> [object HTMLScriptElement]
获取 HTMLCollection 的属性：0 值为：[object HTMLScriptElement]
getAttribute r -> m
获取 HTMLCollection 的属性：0 值为：[object HTMLScriptElement]
获取 HTMLCollection 的属性：0 值为：[object HTMLScriptElement]
removeChild -> [object HTMLScriptElement]
获取 Window 的属性：addEventListener 值为：function addEventListener(type, listener) {
    console.log("addEventListener -> type: " + type + " listener: " + listener);
}
获取 Window 的属性：addEventListener 值为：function addEventListener(type, listener) {
    console.log("addEventListener -> type: " + type + " listener: " + listener);
}
addEventListener -> type: load listener: function _$dA(){var _$dA,_$eN,_$bS,_$_C,_$mr,_$lR;if(_$$O._$g3)(_$eN=_$_v._$kb(),_$dA=_$_v._$kb(),_$eN[1]=_$dT[1],_$eN[3]=_$dT[3]);else{_$eN=[],_$dA=new _$_Z(_$$O._$_c),_$eN[1]=_$dT[1].concat([arguments]),_$eN[3]=_$dT[3].concat([_$dA]),_$bS=_$$O._$j1;for(_$_C=2;_$_C<_$bS.length;_$_C++ )_$dA[_$_C]=_$hv(_$bS[_$_C],_$eN);}_$eN[0]=arguments,_$eN[2]=_$dA,_$dA[0]=this,_$dA[1]=arguments,_$$O._$_K.charCodeAt?_$$O._$_K=_$nf(_$$O._$_K):0,_$$K(_$$O,0,_$$O._$_K.length,_$eN),_$mr=_$eN[4],_$lR=_$eN[5],_$$O._$g3?(_$_v._$aS(_$eN),_$_v._$aS(_$dA)):0;if(_$mr===1)return _$lR;}
获取 Window 的属性：location 值为：[object location]
获取 location 的属性：protocol 值为：https:
获取 Window 的属性：XMLHttpRequest 值为：undefined
获取 Window 的属性：Request 值为：class {
      constructor(input, init = {}) {
        if (input === kInit) {
          return;
        }
        webidl.argumentLengthCheck(arguments, 1, { header: "Request constructor" });
        input = webidl.converters.RequestInfo(input);
        init = webidl.converters.RequestInit(init);
        this[kRealm] = {
          settingsObject: {
            baseUrl: getGlobalOrigin()
          }
        };
        let request = null;
        let fallbackMode = null;
        const baseUrl = this[kRealm].settingsObject.baseUrl;
        let signal = null;
        if (typeof input === "string") {
          let parsedURL;
          try {
            parsedURL = new URL(input, baseUrl);
          } catch (err) {
            throw new TypeError("Failed to parse URL from " + input, { cause: err });
          }
          if (parsedURL.username || parsedURL.password) {
            throw new TypeError("Request cannot be constructed from a URL that includes credentials: " + input);
          }
          request = makeRequest({ urlList: [parsedURL] });
          fallbackMode = "cors";
        } else {
          assert(input instanceof Request);
          request = input[kState];
          signal = input[kSignal];
        }
        const origin = this[kRealm].settingsObject.origin;
        let window = "client";
        if (request.window?.constructor?.name === "EnvironmentSettingsObject" && sameOrigin(request.window, origin)) {
          window = request.window;
        }
        if (init.window !== void 0 && init.window != null) {
          throw new TypeError(`'window' option '${window}' must be null`);
        }
        if (init.window !== void 0) {
          window = "no-window";
        }
        request = makeRequest({
          method: request.method,
          headersList: request.headersList,
          unsafeRequest: request.unsafeRequest,
          client: this[kRealm].settingsObject,
          window,
          priority: request.priority,
          origin: request.origin,
          referrer: request.referrer,
          referrerPolicy: request.referrerPolicy,
          mode: request.mode,
          credentials: request.credentials,
          cache: request.cache,
          redirect: request.redirect,
          integrity: request.integrity,
          keepalive: request.keepalive,
          reloadNavigation: request.reloadNavigation,
          historyNavigation: request.historyNavigation,
          urlList: [...request.urlList]
        });
        if (Object.keys(init).length > 0) {
          if (request.mode === "navigate") {
            request.mode = "same-origin";
          }
          request.reloadNavigation = false;
          request.historyNavigation = false;
          request.origin = "client";
          request.referrer = "client";
          request.referrerPolicy = "";
          request.url = request.urlList[request.urlList.length - 1];
          request.urlList = [request.url];
        }
        if (init.referrer !== void 0) {
          const referrer = init.referrer;
          if (referrer === "") {
            request.referrer = "no-referrer";
          } else {
            let parsedReferrer;
            try {
              parsedReferrer = new URL(referrer, baseUrl);
            } catch (err) {
              throw new TypeError(`Referrer "${referrer}" is not a valid URL.`, { cause: err });
            }
            request.referrer = parsedReferrer;
          }
        }
        if (init.referrerPolicy !== void 0) {
          request.referrerPolicy = init.referrerPolicy;
        }
        let mode;
        if (init.mode !== void 0) {
          mode = init.mode;
        } else {
          mode = fallbackMode;
        }
        if (mode === "navigate") {
          throw webidl.errors.exception({
            header: "Request constructor",
            message: "invalid request mode navigate."
          });
        }
        if (mode != null) {
          request.mode = mode;
        }
        if (init.credentials !== void 0) {
          request.credentials = init.credentials;
        }
        if (init.cache !== void 0) {
          request.cache = init.cache;
        }
        if (request.cache === "only-if-cached" && request.mode !== "same-origin") {
          throw new TypeError("'only-if-cached' can be set only with 'same-origin' mode");
        }
        if (init.redirect !== void 0) {
          request.redirect = init.redirect;
        }
        if (init.integrity !== void 0 && init.integrity != null) {
          request.integrity = String(init.integrity);
        }
        if (init.keepalive !== void 0) {
          request.keepalive = Boolean(init.keepalive);
        }
        if (init.method !== void 0) {
          let method = init.method;
          if (!isValidHTTPToken(init.method)) {
            throw TypeError(`'${init.method}' is not a valid HTTP method.`);
          }
          if (forbiddenMethods.indexOf(method.toUpperCase()) !== -1) {
            throw TypeError(`'${init…thod cannot have body.");
        }
        let initBody = null;
        if (init.body !== void 0 && init.body != null) {
          const [extractedBody, contentType] = extractBody(init.body, request.keepalive);
          initBody = extractedBody;
          if (contentType && !this[kHeaders][kHeadersList].contains("content-type")) {
            this[kHeaders].append("content-type", contentType);
          }
        }
        const inputOrInitBody = initBody ?? inputBody;
        if (inputOrInitBody != null && inputOrInitBody.source == null) {
          if (initBody != null && init.duplex == null) {
            throw new TypeError("RequestInit: duplex option is required when sending a body.");
          }
          if (request.mode !== "same-origin" && request.mode !== "cors") {
            throw new TypeError('If request is made from ReadableStream, mode should be "same-origin" or "cors"');
          }
          request.useCORSPreflightFlag = true;
        }
        let finalBody = inputOrInitBody;
        if (initBody == null && inputBody != null) {
          if (util.isDisturbed(inputBody.stream) || inputBody.stream.locked) {
            throw new TypeError("Cannot construct a Request with a Request object that has already been used.");
          }
          if (!TransformStream) {
            TransformStream = require("stream/web").TransformStream;
          }
          const identityTransform = new TransformStream();
          inputBody.stream.pipeThrough(identityTransform);
          finalBody = {
            source: inputBody.source,
            length: inputBody.length,
            stream: identityTransform.readable
          };
        }
        this[kState].body = finalBody;
      }
      get method() {
        webidl.brandCheck(this, Request);
        return this[kState].method;
      }
      get url() {
        webidl.brandCheck(this, Request);
        return URLSerializer(this[kState].url);
      }
      get headers() {
        webidl.brandCheck(this, Request);
        return this[kHeaders];
      }
      get destination() {
        webidl.brandCheck(this, Request);
        return this[kState].destination;
      }
      get referrer() {
        webidl.brandCheck(this, Request);
        if (this[kState].referrer === "no-referrer") {
          return "";
        }
        if (this[kState].referrer === "client") {
          return "about:client";
        }
        return this[kState].referrer.toString();
      }
      get referrerPolicy() {
        webidl.brandCheck(this, Request);
        return this[kState].referrerPolicy;
      }
      get mode() {
        webidl.brandCheck(this, Request);
        return this[kState].mode;
      }
      get credentials() {
        return this[kState].credentials;
      }
      get cache() {
        webidl.brandCheck(this, Request);
        return this[kState].cache;
      }
      get redirect() {
        webidl.brandCheck(this, Request);
        return this[kState].redirect;
      }
      get integrity() {
        webidl.brandCheck(this, Request);
        return this[kState].integrity;
      }
      get keepalive() {
        webidl.brandCheck(this, Request);
        return this[kState].keepalive;
      }
      get isReloadNavigation() {
        webidl.brandCheck(this, Request);
        return this[kState].reloadNavigation;
      }
      get isHistoryNavigation() {
        webidl.brandCheck(this, Request);
        return this[kState].historyNavigation;
      }
      get signal() {
        webidl.brandCheck(this, Request);
        return this[kSignal];
      }
      get body() {
        webidl.brandCheck(this, Request);
        return this[kState].body ? this[kState].body.stream : null;
      }
      get bodyUsed() {
        webidl.brandCheck(this, Request);
        return !!this[kState].body && util.isDisturbed(this[kState].body.stream);
      }
      get duplex() {
        webidl.brandCheck(this, Request);
        return "half";
      }
      clone() {
        webidl.brandCheck(this, Request);
        if (this.bodyUsed || this.body?.locked) {
          throw new TypeError("unusable");
        }
        const clonedRequest = cloneRequest(this[kState]);
        const clonedRequestObject = new Request(kInit);
        clonedRequestObject[kState] = clonedRequest;
        clonedRequestObject[kRealm] = this[kRealm];
        clonedRequestObject[kHeaders] = new Headers();
        clonedRequestObject[kHeaders][kHeadersList] = clonedRequest.headersList;
        clonedRequestObject[kHeaders][kGuard] = this[kHeaders][kGuard];
        clonedRequestObject[kHeaders][kRealm] = this[kHeaders][kRealm];
        const ac = new AbortController();
        if (this.signal.aborted) {
          ac.abort(this.signal.reason);
        } else {
          this.signal.addEventListener("abort", () => {
            ac.abort(this.signal.reason);
          }, { once: true });
        }
        clonedRequestObject[kSignal] = ac.signal;
        return clonedRequestObject;
      }
    }…
获取 Window 的属性：fetch 值为：async function fetch(input, init = undefined) {
    return lazyUndici().fetch(input, init);
  }
设置 Window 的属性：_$kS 值为：function _$jQ(_$dA){return _$ly(_$dA[_$cf[67]](1));}
设置 Window 的属性：_$nt 值为：function _$ks(){var _$jA=[128];Array.prototype.push.apply(_$jA,arguments);return _$aq.apply(this,_$jA);}
获取 sessionStorage 的属性：getItem 值为：function getItem(keyName) {
    console.log("getItem -> " + keyName);
    return this[keyName];
}
getItem -> _$rc
获取 sessionStorage 的属性：_$rc 值为：undefined
获取 localStorage 的属性：getItem 值为：function getItem(keyName) {
    console.log("getItem -> " + keyName);
    return this[keyName];
}
getItem -> _$rc
获取 localStorage 的属性：_$rc 值为：undefined
获取 document 的属性：getElementsByTagName 值为：function getElementsByTagName(name) {

    var result = [];
    Object.defineProperties(result, {
        [Symbol.toStringTag]: {
            value: 'HTMLCollection',
            configurable: true
        }
    });
    switch (name) {
        case "meta":
            var headElem = { removeChild: removeChild };
            Object.defineProperties(headElem, {
                [Symbol.toStringTag]: {
                    value: 'HTMLHeadElement',
                    configurable: true
                }
            });
            var metaElem = { content: window.content, getAttribute: getAttribute, parentNode: headElem };
            Object.defineProperties(metaElem, {
                [Symbol.toStringTag]: {
                    value: 'HTMLMetaElement ',
                    configurable: true
                }
            });
            result[0] = metaElem;
            break;
        case "script":
            var headElem = { removeChild: removeChild };
            Object.defineProperties(headElem, {
                [Symbol.toStringTag]: {
                    value: 'HTMLHeadElement',
                    configurable: true
                }
            });

            var ele = { getAttribute: getAttribute, parentElement: headElem };
            Object.defineProperties(ele, {
                [Symbol.toStringTag]: {
                    value: 'HTMLScriptElement',
                    configurable: true
                }
            });

            result[0] = ele;
            result[1] = ele;
            break;
    }
    console.log("getElementsByTagName " + name + "-> " + result);
    result = proxy(result);
    return result;
}
获取 Window 的属性：content 值为：fofAtbiByMy1t1wDvXGpSIJ9np3r5qiOq2JQ7XREaFj1riX_xEGKjjmGUs.isOIU2fYwcDzABE5eo0eqhgxkPaJhHYNt4nAjZMDuLhNWFjaItahYcKoRVCyND6u3bXuyZcKb7._zCzR13gix2uubZx4rbvw5ApvXGMlIKcCLpuDMAUv.mnqOtkayoPLk2UWhHOFdzTqrJ17DUgFtTl0sFE4pl5IhXQZuhUT.3cWx7Mr8f9K2vdl_gY2.Y39_E5ptwO6GeWiF8hl1QjhCDW7RP3afupIAGqeaEXIJYNSHsBM_2joic6nl_vjqV6VEWRR31Gl4EFqbQuFAR_r_hFLA20NZngyTZ433FyhGm4iYGVs2hqMQGHVXdoZKz48L9DJzQxUAIdHZo5g
getElementsByTagName meta-> [object HTMLMetaElement ]
获取 HTMLCollection 的属性：length 值为：1
获取 HTMLCollection 的属性：0 值为：[object HTMLMetaElement ]
getAttribute r -> m
removeChild -> [object HTMLMetaElement ]
获取 Window 的属性：Math 值为：[object Math]
获取 Window 的属性：Math 值为：[object Math]
获取 Window 的属性：Math 值为：[object Math]
获取 Window 的属性：Math 值为：[object Math]
获取 Window 的属性：parseFloat 值为：function parseFloat() { [native code] }
获取 Window 的属性：self 值为：[object Window]
获取 Window 的属性：top 值为：[object Window]
设置 document 的属性：cookie 值为：enable_undefined=true; Secure
获取 document 的属性：cookie 值为：enable_undefined=true; Secure
获取 Window 的属性：Math 值为：[object Math]
获取 Window 的属性：location 值为：[object location]
获取 location 的属性：port 值为：
获取 location 的属性：protocol 值为：https:
设置 Window 的属性：fetch 值为：function _$dA(){var _$dA,_$eN,_$bS,_$_C,_$mr,_$lR;if(_$$O._$g3)(_$eN=_$_v._$kb(),_$dA=_$_v._$kb(),_$eN[1]=_$dT[1],_$eN[3]=_$dT[3]);else{_$eN=[],_$dA=new _$_Z(_$$O._$_c),_$eN[1]=_$dT[1].concat([arguments]),_$eN[3]=_$dT[3].concat([_$dA]),_$bS=_$$O._$j1;for(_$_C=2;_$_C<_$bS.length;_$_C++ )_$dA[_$_C]=_$hv(_$bS[_$_C],_$eN);}_$eN[0]=arguments,_$eN[2]=_$dA,_$dA[0]=this,_$dA[1]=arguments,_$$O._$_K.charCodeAt?_$$O._$_K=_$nf(_$$O._$_K):0,_$$K(_$$O,0,_$$O._$_K.length,_$eN),_$mr=_$eN[4],_$lR=_$eN[5],_$$O._$g3?(_$_v._$aS(_$eN),_$_v._$aS(_$dA)):0;if(_$mr===1)return _$lR;}
获取 Window 的属性：fetch 值为：function _$dA(){var _$dA,_$eN,_$bS,_$_C,_$mr,_$lR;if(_$$O._$g3)(_$eN=_$_v._$kb(),_$dA=_$_v._$kb(),_$eN[1]=_$dT[1],_$eN[3]=_$dT[3]);else{_$eN=[],_$dA=new _$_Z(_$$O._$_c),_$eN[1]=_$dT[1].concat([arguments]),_$eN[3]=_$dT[3].concat([_$dA]),_$bS=_$$O._$j1;for(_$_C=2;_$_C<_$bS.length;_$_C++ )_$dA[_$_C]=_$hv(_$bS[_$_C],_$eN);}_$eN[0]=arguments,_$eN[2]=_$dA,_$dA[0]=this,_$dA[1]=arguments,_$$O._$_K.charCodeAt?_$$O._$_K=_$nf(_$$O._$_K):0,_$$K(_$$O,0,_$$O._$_K.length,_$eN),_$mr=_$eN[4],_$lR=_$eN[5],_$$O._$g3?(_$_v._$aS(_$eN),_$_v._$aS(_$dA)):0;if(_$mr===1)return _$lR;}
获取 Window 的属性：Request 值为：class {
      constructor(input, init = {}) {
        if (input === kInit) {
          return;
        }
        webidl.argumentLengthCheck(arguments, 1, { header: "Request constructor" });
        input = webidl.converters.RequestInfo(input);
        init = webidl.converters.RequestInit(init);
        this[kRealm] = {
          settingsObject: {
            baseUrl: getGlobalOrigin()
          }
        };
        let request = null;
        let fallbackMode = null;
        const baseUrl = this[kRealm].settingsObject.baseUrl;
        let signal = null;
        if (typeof input === "string") {
          let parsedURL;
          try {
            parsedURL = new URL(input, baseUrl);
          } catch (err) {
            throw new TypeError("Failed to parse URL from " + input, { cause: err });
          }
          if (parsedURL.username || parsedURL.password) {
            throw new TypeError("Request cannot be constructed from a URL that includes credentials: " + input);
          }
          request = makeRequest({ urlList: [parsedURL] });
          fallbackMode = "cors";
        } else {
          assert(input instanceof Request);
          request = input[kState];
          signal = input[kSignal];
        }
        const origin = this[kRealm].settingsObject.origin;
        let window = "client";
        if (request.window?.constructor?.name === "EnvironmentSettingsObject" && sameOrigin(request.window, origin)) {
          window = request.window;
        }
        if (init.window !== void 0 && init.window != null) {
          throw new TypeError(`'window' option '${window}' must be null`);
        }
        if (init.window !== void 0) {
          window = "no-window";
        }
        request = makeRequest({
          method: request.method,
          headersList: request.headersList,
          unsafeRequest: request.unsafeRequest,
          client: this[kRealm].settingsObject,
          window,
          priority: request.priority,
          origin: request.origin,
          referrer: request.referrer,
          referrerPolicy: request.referrerPolicy,
          mode: request.mode,
          credentials: request.credentials,
          cache: request.cache,
          redirect: request.redirect,
          integrity: request.integrity,
          keepalive: request.keepalive,
          reloadNavigation: request.reloadNavigation,
          historyNavigation: request.historyNavigation,
          urlList: [...request.urlList]
        });
        if (Object.keys(init).length > 0) {
          if (request.mode === "navigate") {
            request.mode = "same-origin";
          }
          request.reloadNavigation = false;
          request.historyNavigation = false;
          request.origin = "client";
          request.referrer = "client";
          request.referrerPolicy = "";
          request.url = request.urlList[request.urlList.length - 1];
          request.urlList = [request.url];
        }
        if (init.referrer !== void 0) {
          const referrer = init.referrer;
          if (referrer === "") {
            request.referrer = "no-referrer";
          } else {
            let parsedReferrer;
            try {
              parsedReferrer = new URL(referrer, baseUrl);
            } catch (err) {
              throw new TypeError(`Referrer "${referrer}" is not a valid URL.`, { cause: err });
            }
            request.referrer = parsedReferrer;
          }
        }
        if (init.referrerPolicy !== void 0) {
          request.referrerPolicy = init.referrerPolicy;
        }
        let mode;
        if (init.mode !== void 0) {
          mode = init.mode;
        } else {
          mode = fallbackMode;
        }
        if (mode === "navigate") {
          throw webidl.errors.exception({
            header: "Request constructor",
            message: "invalid request mode navigate."
          });
        }
        if (mode != null) {
          request.mode = mode;
        }
        if (init.credentials !== void 0) {
          request.credentials = init.credentials;
        }
        if (init.cache !== void 0) {
          request.cache = init.cache;
        }
        if (request.cache === "only-if-cached" && request.mode !== "same-origin") {
          throw new TypeError("'only-if-cached' can be set only with 'same-origin' mode");
        }
        if (init.redirect !== void 0) {
          request.redirect = init.redirect;
        }
        if (init.integrity !== void 0 && init.integrity != null) {
          request.integrity = String(init.integrity);
        }
        if (init.keepalive !== void 0) {
          request.keepalive = Boolean(init.keepalive);
        }
        if (init.method !== void 0) {
          let method = init.method;
          if (!isValidHTTPToken(init.method)) {
            throw TypeError(`'${init.method}' is not a valid HTTP method.`);
          }
          if (forbiddenMethods.indexOf(method.toUpperCase()) !== -1) {
            throw TypeError(`'${init…thod cannot have body.");
        }
        let initBody = null;
        if (init.body !== void 0 && init.body != null) {
          const [extractedBody, contentType] = extractBody(init.body, request.keepalive);
          initBody = extractedBody;
          if (contentType && !this[kHeaders][kHeadersList].contains("content-type")) {
            this[kHeaders].append("content-type", contentType);
          }
        }
        const inputOrInitBody = initBody ?? inputBody;
        if (inputOrInitBody != null && inputOrInitBody.source == null) {
          if (initBody != null && init.duplex == null) {
            throw new TypeError("RequestInit: duplex option is required when sending a body.");
          }
          if (request.mode !== "same-origin" && request.mode !== "cors") {
            throw new TypeError('If request is made from ReadableStream, mode should be "same-origin" or "cors"');
          }
          request.useCORSPreflightFlag = true;
        }
        let finalBody = inputOrInitBody;
        if (initBody == null && inputBody != null) {
          if (util.isDisturbed(inputBody.stream) || inputBody.stream.locked) {
            throw new TypeError("Cannot construct a Request with a Request object that has already been used.");
          }
          if (!TransformStream) {
            TransformStream = require("stream/web").TransformStream;
          }
          const identityTransform = new TransformStream();
          inputBody.stream.pipeThrough(identityTransform);
          finalBody = {
            source: inputBody.source,
            length: inputBody.length,
            stream: identityTransform.readable
          };
        }
        this[kState].body = finalBody;
      }
      get method() {
        webidl.brandCheck(this, Request);
        return this[kState].method;
      }
      get url() {
        webidl.brandCheck(this, Request);
        return URLSerializer(this[kState].url);
      }
      get headers() {
        webidl.brandCheck(this, Request);
        return this[kHeaders];
      }
      get destination() {
        webidl.brandCheck(this, Request);
        return this[kState].destination;
      }
      get referrer() {
        webidl.brandCheck(this, Request);
        if (this[kState].referrer === "no-referrer") {
          return "";
        }
        if (this[kState].referrer === "client") {
          return "about:client";
        }
        return this[kState].referrer.toString();
      }
      get referrerPolicy() {
        webidl.brandCheck(this, Request);
        return this[kState].referrerPolicy;
      }
      get mode() {
        webidl.brandCheck(this, Request);
        return this[kState].mode;
      }
      get credentials() {
        return this[kState].credentials;
      }
      get cache() {
        webidl.brandCheck(this, Request);
        return this[kState].cache;
      }
      get redirect() {
        webidl.brandCheck(this, Request);
        return this[kState].redirect;
      }
      get integrity() {
        webidl.brandCheck(this, Request);
        return this[kState].integrity;
      }
      get keepalive() {
        webidl.brandCheck(this, Request);
        return this[kState].keepalive;
      }
      get isReloadNavigation() {
        webidl.brandCheck(this, Request);
        return this[kState].reloadNavigation;
      }
      get isHistoryNavigation() {
        webidl.brandCheck(this, Request);
        return this[kState].historyNavigation;
      }
      get signal() {
        webidl.brandCheck(this, Request);
        return this[kSignal];
      }
      get body() {
        webidl.brandCheck(this, Request);
        return this[kState].body ? this[kState].body.stream : null;
      }
      get bodyUsed() {
        webidl.brandCheck(this, Request);
        return !!this[kState].body && util.isDisturbed(this[kState].body.stream);
      }
      get duplex() {
        webidl.brandCheck(this, Request);
        return "half";
      }
      clone() {
        webidl.brandCheck(this, Request);
        if (this.bodyUsed || this.body?.locked) {
          throw new TypeError("unusable");
        }
        const clonedRequest = cloneRequest(this[kState]);
        const clonedRequestObject = new Request(kInit);
        clonedRequestObject[kState] = clonedRequest;
        clonedRequestObject[kRealm] = this[kRealm];
        clonedRequestObject[kHeaders] = new Headers();
        clonedRequestObject[kHeaders][kHeadersList] = clonedRequest.headersList;
        clonedRequestObject[kHeaders][kGuard] = this[kHeaders][kGuard];
        clonedRequestObject[kHeaders][kRealm] = this[kHeaders][kRealm];
        const ac = new AbortController();
        if (this.signal.aborted) {
          ac.abort(this.signal.reason);
        } else {
          this.signal.addEventListener("abort", () => {
            ac.abort(this.signal.reason);
          }, { once: true });
        }
        clonedRequestObject[kSignal] = ac.signal;
        return clonedRequestObject;
      }
    }…
设置 Window 的属性：Request 值为：function _$dA(){var _$dA,_$eN,_$bS,_$_C,_$mr,_$lR;if(_$$O._$g3)(_$eN=_$_v._$kb(),_$dA=_$_v._$kb(),_$eN[1]=_$dT[1],_$eN[3]=_$dT[3]);else{_$eN=[],_$dA=new _$_Z(_$$O._$_c),_$eN[1]=_$dT[1].concat([arguments]),_$eN[3]=_$dT[3].concat([_$dA]),_$bS=_$$O._$j1;for(_$_C=2;_$_C<_$bS.length;_$_C++ )_$dA[_$_C]=_$hv(_$bS[_$_C],_$eN);}_$eN[0]=arguments,_$eN[2]=_$dA,_$dA[0]=this,_$dA[1]=arguments,_$$O._$_K.charCodeAt?_$$O._$_K=_$nf(_$$O._$_K):0,_$$K(_$$O,0,_$$O._$_K.length,_$eN),_$mr=_$eN[4],_$lR=_$eN[5],_$$O._$g3?(_$_v._$aS(_$eN),_$_v._$aS(_$dA)):0;if(_$mr===1)return _$lR;}
设置 Window 的属性：$_ts 值为：[object Object]
获取 Window 的属性：$_ts 值为：[object Object]
获取 Window 的属性：showModalDialog 值为：undefined
获取 Window 的属性：navigator 值为：[object navigator]
获取 navigator 的属性：userAgent 值为：Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/115.0.0.0 Safari/537.36
获取 navigator 的属性：standalone 值为：undefined
获取 Window 的属性：MSBlobBuilder 值为：undefined
获取 navigator 的属性：webkitPersistentStorage 值为：undefined
获取 document 的属性：documentElement 值为：[object documentElement]
获取 documentElement 的属性：style 值为：[object style]
获取 Window 的属性：UCWebExt 值为：undefined
获取 Window 的属性：ucweb 值为：undefined
获取 Window 的属性：qb_bridge 值为：undefined
获取 Window 的属性：qbbookshelf 值为：undefined
获取 Window 的属性：dolphin 值为：undefined
获取 Window 的属性：dolphininfo 值为：undefined
获取 Window 的属性：dolphinmeta 值为：undefined
获取 Window 的属性：chrome 值为：undefined
获取 Window 的属性：qihoo 值为：undefined
获取 Window 的属性：safari 值为：undefined
获取 Window 的属性：orientation 值为：undefined
获取 Window 的属性：ActiveXObject 值为：undefined
当前 _$mr ->  12  _$ls ->  0
当前 _$mr ->  49  _$ls ->  1
当前 _$mr ->  0  _$ls ->  2
获取 Window 的属性：navigator 值为：[object navigator]
当前 _$mr ->  49  _$ls ->  1
当前 _$mr ->  0  _$ls ->  2
获取 navigator 的属性：mimeTypes 值为：
当前 _$mr ->  56  _$ls ->  1
当前 _$mr ->  31  _$ls ->  0
当前 _$mr ->  49  _$ls ->  1
当前 _$mr ->  0  _$ls ->  2
获取 MimeTypeArray 的属性：application/x-shockwave-flash 值为：undefined
当前 _$mr ->  56  _$ls ->  1
当前 _$mr ->  31  _$ls ->  0
当前 _$mr ->  17  _$ls ->  1
当前 _$mr ->  56  _$ls ->  1
当前 _$mr ->  31  _$ls ->  0
当前 _$mr ->  12  _$ls ->  1
当前 _$mr ->  32  _$ls ->  2
当前 _$mr ->  89  _$ls ->  1
当前 _$mr ->  5  _$ls ->  1
当前 _$mr ->  3  _$ls ->  1
当前 _$mr ->  12  _$ls ->  0
当前 _$mr ->  49  _$ls ->  1
当前 _$mr ->  8  _$ls ->  2
当前 _$mr ->  12  _$ls ->  0
当前 _$mr ->  12  _$ls ->  1
当前 _$mr ->  48  _$ls ->  2
当前 _$mr ->  0  _$ls ->  3
当前 _$mr ->  38  _$ls ->  2
当前 _$mr ->  12  _$ls ->  3
当前 _$mr ->  48  _$ls ->  4
当前 _$mr ->  0  _$ls ->  5
当前 _$mr ->  1  _$ls ->  4
当前 _$mr ->  56  _$ls ->  1
当前 _$mr ->  48  _$ls ->  0
当前 _$mr ->  56  _$ls ->  1
当前 _$mr ->  31  _$ls ->  0
当前 _$mr ->  38  _$ls ->  1
当前 _$mr ->  12  _$ls ->  2
当前 _$mr ->  48  _$ls ->  3
当前 _$mr ->  0  _$ls ->  4
当前 _$mr ->  0  _$ls ->  3
当前 _$mr ->  52  _$ls ->  2
当前 _$mr ->  3  _$ls ->  1
当前 _$mr ->  38  _$ls ->  0
当前 _$mr ->  38  _$ls ->  1
当前 _$mr ->  31  _$ls ->  2
当前 _$mr ->  0  _$ls ->  3
当前 _$mr ->  0  _$ls ->  2
获取 Window 的属性：callPhantom 值为：undefined
当前 _$mr ->  12  _$ls ->  1
当前 _$mr ->  32  _$ls ->  2
当前 _$mr ->  3  _$ls ->  1
当前 _$mr ->  24  _$ls ->  0
当前 _$mr ->  55  _$ls ->  0
当前 _$mr ->  20  _$ls ->  0
当前 _$mr ->  31  _$ls ->  0
当前 _$mr ->  38  _$ls ->  1
当前 _$mr ->  12  _$ls ->  2
当前 _$mr ->  48  _$ls ->  3
当前 _$mr ->  0  _$ls ->  4
当前 _$mr ->  0  _$ls ->  3
当前 _$mr ->  52  _$ls ->  2
当前 _$mr ->  3  _$ls ->  1
当前 _$mr ->  38  _$ls ->  0
当前 _$mr ->  38  _$ls ->  1
当前 _$mr ->  31  _$ls ->  2
当前 _$mr ->  0  _$ls ->  3
当前 _$mr ->  0  _$ls ->  2
获取 Window 的属性：_phantom 值为：undefined
当前 _$mr ->  12  _$ls ->  1
当前 _$mr ->  32  _$ls ->  2
当前 _$mr ->  3  _$ls ->  1
当前 _$mr ->  24  _$ls ->  0
当前 _$mr ->  55  _$ls ->  0
当前 _$mr ->  20  _$ls ->  0
当前 _$mr ->  31  _$ls ->  0
当前 _$mr ->  38  _$ls ->  1
当前 _$mr ->  12  _$ls ->  2
当前 _$mr ->  48  _$ls ->  3
当前 _$mr ->  0  _$ls ->  4
当前 _$mr ->  0  _$ls ->  3
当前 _$mr ->  52  _$ls ->  2
当前 _$mr ->  3  _$ls ->  1
当前 _$mr ->  3  _$ls ->  1
当前 _$mr ->  12  _$ls ->  0
当前 _$mr ->  49  _$ls ->  1
当前 _$mr ->  8  _$ls ->  2
当前 _$mr ->  12  _$ls ->  0
当前 _$mr ->  12  _$ls ->  1
当前 _$mr ->  48  _$ls ->  2
当前 _$mr ->  0  _$ls ->  3
当前 _$mr ->  38  _$ls ->  2
当前 _$mr ->  12  _$ls ->  3
当前 _$mr ->  48  _$ls ->  4
当前 _$mr ->  0  _$ls ->  5
当前 _$mr ->  1  _$ls ->  4
当前 _$mr ->  56  _$ls ->  1
当前 _$mr ->  48  _$ls ->  0
当前 _$mr ->  56  _$ls ->  1
当前 _$mr ->  31  _$ls ->  0
当前 _$mr ->  38  _$ls ->  1
当前 _$mr ->  12  _$ls ->  2
当前 _$mr ->  48  _$ls ->  3
当前 _$mr ->  0  _$ls ->  4
当前 _$mr ->  0  _$ls ->  3
当前 _$mr ->  52  _$ls ->  2
当前 _$mr ->  3  _$ls ->  1
当前 _$mr ->  38  _$ls ->  0
当前 _$mr ->  38  _$ls ->  1
当前 _$mr ->  31  _$ls ->  2
当前 _$mr ->  0  _$ls ->  3
当前 _$mr ->  0  _$ls ->  2
获取 Window 的属性：$hook$ 值为：undefined
当前 _$mr ->  12  _$ls ->  1
当前 _$mr ->  32  _$ls ->  2
当前 _$mr ->  3  _$ls ->  1
当前 _$mr ->  24  _$ls ->  0
当前 _$mr ->  55  _$ls ->  0
当前 _$mr ->  20  _$ls ->  0
当前 _$mr ->  31  _$ls ->  0
当前 _$mr ->  38  _$ls ->  1
当前 _$mr ->  12  _$ls ->  2
当前 _$mr ->  48  _$ls ->  3
当前 _$mr ->  0  _$ls ->  4
当前 _$mr ->  0  _$ls ->  3
当前 _$mr ->  52  _$ls ->  2
当前 _$mr ->  3  _$ls ->  1
当前 _$mr ->  38  _$ls ->  0
当前 _$mr ->  38  _$ls ->  1
当前 _$mr ->  31  _$ls ->  2
当前 _$mr ->  0  _$ls ->  3
当前 _$mr ->  0  _$ls ->  2
获取 Window 的属性：$$logger 值为：undefined
当前 _$mr ->  12  _$ls ->  1
当前 _$mr ->  32  _$ls ->  2
当前 _$mr ->  3  _$ls ->  1
当前 _$mr ->  24  _$ls ->  0
当前 _$mr ->  55  _$ls ->  0
当前 _$mr ->  20  _$ls ->  0
当前 _$mr ->  31  _$ls ->  0
当前 _$mr ->  38  _$ls ->  1
当前 _$mr ->  12  _$ls ->  2
当前 _$mr ->  48  _$ls ->  3
当前 _$mr ->  0  _$ls ->  4
当前 _$mr ->  0  _$ls ->  3
当前 _$mr ->  52  _$ls ->  2
当前 _$mr ->  3  _$ls ->  1
当前 _$mr ->  38  _$ls ->  0
当前 _$mr ->  38  _$ls ->  1
当前 _$mr ->  31  _$ls ->  2
当前 _$mr ->  0  _$ls ->  3
当前 _$mr ->  0  _$ls ->  2
获取 Window 的属性：$$lsp 值为：undefined
当前 _$mr ->  12  _$ls ->  1
当前 _$mr ->  32  _$ls ->  2
当前 _$mr ->  3  _$ls ->  1
当前 _$mr ->  24  _$ls ->  0
当前 _$mr ->  55  _$ls ->  0
当前 _$mr ->  20  _$ls ->  0
当前 _$mr ->  31  _$ls ->  0
当前 _$mr ->  38  _$ls ->  1
当前 _$mr ->  12  _$ls ->  2
当前 _$mr ->  48  _$ls ->  3
当前 _$mr ->  0  _$ls ->  4
当前 _$mr ->  0  _$ls ->  3
当前 _$mr ->  52  _$ls ->  2
当前 _$mr ->  3  _$ls ->  1
当前 _$mr ->  38  _$ls ->  0
当前 _$mr ->  38  _$ls ->  1
当前 _$mr ->  31  _$ls ->  2
当前 _$mr ->  0  _$ls ->  3
当前 _$mr ->  0  _$ls ->  2
获取 Window 的属性：$$lsrb 值为：undefined
当前 _$mr ->  12  _$ls ->  1
当前 _$mr ->  32  _$ls ->  2
当前 _$mr ->  3  _$ls ->  1
当前 _$mr ->  24  _$ls ->  0
当前 _$mr ->  55  _$ls ->  0
当前 _$mr ->  20  _$ls ->  0
当前 _$mr ->  31  _$ls ->  0
当前 _$mr ->  38  _$ls ->  1
当前 _$mr ->  12  _$ls ->  2
当前 _$mr ->  48  _$ls ->  3
当前 _$mr ->  0  _$ls ->  4
当前 _$mr ->  0  _$ls ->  3
当前 _$mr ->  52  _$ls ->  2
当前 _$mr ->  3  _$ls ->  1
当前 _$mr ->  38  _$ls ->  0
当前 _$mr ->  38  _$ls ->  1
当前 _$mr ->  31  _$ls ->  2
当前 _$mr ->  0  _$ls ->  3
当前 _$mr ->  0  _$ls ->  2
获取 Window 的属性：$hdx$ 值为：undefined
当前 _$mr ->  12  _$ls ->  1
当前 _$mr ->  32  _$ls ->  2
当前 _$mr ->  3  _$ls ->  1
当前 _$mr ->  24  _$ls ->  0
当前 _$mr ->  55  _$ls ->  0
当前 _$mr ->  20  _$ls ->  0
当前 _$mr ->  31  _$ls ->  0
当前 _$mr ->  38  _$ls ->  1
当前 _$mr ->  12  _$ls ->  2
当前 _$mr ->  48  _$ls ->  3
当前 _$mr ->  0  _$ls ->  4
当前 _$mr ->  0  _$ls ->  3
当前 _$mr ->  52  _$ls ->  2
当前 _$mr ->  3  _$ls ->  1
当前 _$mr ->  38  _$ls ->  0
当前 _$mr ->  38  _$ls ->  1
当前 _$mr ->  31  _$ls ->  2
当前 _$mr ->  0  _$ls ->  3
当前 _$mr ->  0  _$ls ->  2
获取 Window 的属性：$readyCodeAlreadyExecutedInThisFrame 值为：undefined
当前 _$mr ->  12  _$ls ->  1
当前 _$mr ->  32  _$ls ->  2
当前 _$mr ->  3  _$ls ->  1
当前 _$mr ->  24  _$ls ->  0
当前 _$mr ->  55  _$ls ->  0
当前 _$mr ->  20  _$ls ->  0
当前 _$mr ->  31  _$ls ->  0
当前 _$mr ->  38  _$ls ->  1
当前 _$mr ->  12  _$ls ->  2
当前 _$mr ->  48  _$ls ->  3
当前 _$mr ->  0  _$ls ->  4
当前 _$mr ->  0  _$ls ->  3
当前 _$mr ->  52  _$ls ->  2
当前 _$mr ->  3  _$ls ->  1
当前 _$mr ->  38  _$ls ->  0
当前 _$mr ->  38  _$ls ->  1
当前 _$mr ->  31  _$ls ->  2
当前 _$mr ->  0  _$ls ->  3
当前 _$mr ->  0  _$ls ->  2
获取 Window 的属性：$sdx$ 值为：undefined
当前 _$mr ->  12  _$ls ->  1
当前 _$mr ->  32  _$ls ->  2
当前 _$mr ->  3  _$ls ->  1
当前 _$mr ->  24  _$ls ->  0
当前 _$mr ->  55  _$ls ->  0
当前 _$mr ->  20  _$ls ->  0
当前 _$mr ->  31  _$ls ->  0
当前 _$mr ->  38  _$ls ->  1
当前 _$mr ->  12  _$ls ->  2
当前 _$mr ->  48  _$ls ->  3
当前 _$mr ->  0  _$ls ->  4
当前 _$mr ->  0  _$ls ->  3
当前 _$mr ->  52  _$ls ->  2
当前 _$mr ->  3  _$ls ->  1
当前 _$mr ->  38  _$ls ->  0
当前 _$mr ->  38  _$ls ->  1
当前 _$mr ->  31  _$ls ->  2
当前 _$mr ->  0  _$ls ->  3
当前 _$mr ->  0  _$ls ->  2
获取 Window 的属性：$uie$ 值为：undefined
当前 _$mr ->  12  _$ls ->  1
当前 _$mr ->  32  _$ls ->  2
当前 _$mr ->  3  _$ls ->  1
当前 _$mr ->  24  _$ls ->  0
当前 _$mr ->  55  _$ls ->  0
当前 _$mr ->  20  _$ls ->  0
当前 _$mr ->  31  _$ls ->  0
当前 _$mr ->  38  _$ls ->  1
当前 _$mr ->  12  _$ls ->  2
当前 _$mr ->  48  _$ls ->  3
当前 _$mr ->  0  _$ls ->  4
当前 _$mr ->  0  _$ls ->  3
当前 _$mr ->  52  _$ls ->  2
当前 _$mr ->  3  _$ls ->  1
当前 _$mr ->  3  _$ls ->  1
当前 _$mr ->  12  _$ls ->  0
当前 _$mr ->  49  _$ls ->  1
当前 _$mr ->  8  _$ls ->  2
当前 _$mr ->  12  _$ls ->  0
当前 _$mr ->  12  _$ls ->  1
当前 _$mr ->  48  _$ls ->  2
当前 _$mr ->  0  _$ls ->  3
当前 _$mr ->  38  _$ls ->  2
当前 _$mr ->  12  _$ls ->  3
当前 _$mr ->  48  _$ls ->  4
当前 _$mr ->  0  _$ls ->  5
当前 _$mr ->  1  _$ls ->  4
当前 _$mr ->  56  _$ls ->  1
当前 _$mr ->  48  _$ls ->  0
当前 _$mr ->  56  _$ls ->  1
当前 _$mr ->  31  _$ls ->  0
当前 _$mr ->  38  _$ls ->  1
当前 _$mr ->  12  _$ls ->  2
当前 _$mr ->  48  _$ls ->  3
当前 _$mr ->  0  _$ls ->  4
当前 _$mr ->  0  _$ls ->  3
当前 _$mr ->  52  _$ls ->  2
当前 _$mr ->  3  _$ls ->  1
当前 _$mr ->  38  _$ls ->  0
当前 _$mr ->  38  _$ls ->  1
当前 _$mr ->  31  _$ls ->  2
当前 _$mr ->  0  _$ls ->  3
当前 _$mr ->  0  _$ls ->  2
获取 Window 的属性：netsparker 值为：undefined
当前 _$mr ->  12  _$ls ->  1
当前 _$mr ->  32  _$ls ->  2
当前 _$mr ->  3  _$ls ->  1
当前 _$mr ->  24  _$ls ->  0
当前 _$mr ->  55  _$ls ->  0
当前 _$mr ->  20  _$ls ->  0
当前 _$mr ->  31  _$ls ->  0
当前 _$mr ->  38  _$ls ->  1
当前 _$mr ->  12  _$ls ->  2
当前 _$mr ->  48  _$ls ->  3
当前 _$mr ->  0  _$ls ->  4
当前 _$mr ->  0  _$ls ->  3
当前 _$mr ->  52  _$ls ->  2
当前 _$mr ->  3  _$ls ->  1
当前 _$mr ->  38  _$ls ->  0
当前 _$mr ->  38  _$ls ->  1
当前 _$mr ->  31  _$ls ->  2
当前 _$mr ->  0  _$ls ->  3
当前 _$mr ->  0  _$ls ->  2
获取 Window 的属性：__ns 值为：undefined
当前 _$mr ->  12  _$ls ->  1
当前 _$mr ->  32  _$ls ->  2
当前 _$mr ->  3  _$ls ->  1
当前 _$mr ->  24  _$ls ->  0
当前 _$mr ->  55  _$ls ->  0
当前 _$mr ->  20  _$ls ->  0
当前 _$mr ->  31  _$ls ->  0
当前 _$mr ->  38  _$ls ->  1
当前 _$mr ->  12  _$ls ->  2
当前 _$mr ->  48  _$ls ->  3
当前 _$mr ->  0  _$ls ->  4
当前 _$mr ->  0  _$ls ->  3
当前 _$mr ->  52  _$ls ->  2
当前 _$mr ->  3  _$ls ->  1
当前 _$mr ->  38  _$ls ->  0
当前 _$mr ->  38  _$ls ->  1
当前 _$mr ->  31  _$ls ->  2
当前 _$mr ->  0  _$ls ->  3
当前 _$mr ->  0  _$ls ->  2
获取 Window 的属性：__nsAppendText 值为：undefined
当前 _$mr ->  12  _$ls ->  1
当前 _$mr ->  32  _$ls ->  2
当前 _$mr ->  3  _$ls ->  1
当前 _$mr ->  24  _$ls ->  0
当前 _$mr ->  55  _$ls ->  0
当前 _$mr ->  20  _$ls ->  0
当前 _$mr ->  31  _$ls ->  0
当前 _$mr ->  38  _$ls ->  1
当前 _$mr ->  12  _$ls ->  2
当前 _$mr ->  48  _$ls ->  3
当前 _$mr ->  0  _$ls ->  4
当前 _$mr ->  0  _$ls ->  3
当前 _$mr ->  52  _$ls ->  2
当前 _$mr ->  3  _$ls ->  1
当前 _$mr ->  38  _$ls ->  0
当前 _$mr ->  38  _$ls ->  1
当前 _$mr ->  31  _$ls ->  2
当前 _$mr ->  0  _$ls ->  3
当前 _$mr ->  0  _$ls ->  2
获取 Window 的属性：eoWebBrowser 值为：undefined
当前 _$mr ->  12  _$ls ->  1
当前 _$mr ->  32  _$ls ->  2
当前 _$mr ->  3  _$ls ->  1
当前 _$mr ->  24  _$ls ->  0
当前 _$mr ->  55  _$ls ->  0
当前 _$mr ->  20  _$ls ->  0
当前 _$mr ->  31  _$ls ->  0
当前 _$mr ->  38  _$ls ->  1
当前 _$mr ->  12  _$ls ->  2
当前 _$mr ->  48  _$ls ->  3
当前 _$mr ->  0  _$ls ->  4
当前 _$mr ->  0  _$ls ->  3
当前 _$mr ->  52  _$ls ->  2
当前 _$mr ->  3  _$ls ->  1
当前 _$mr ->  3  _$ls ->  1
当前 _$mr ->  12  _$ls ->  0
当前 _$mr ->  49  _$ls ->  1
当前 _$mr ->  8  _$ls ->  2
当前 _$mr ->  38  _$ls ->  0
当前 _$mr ->  38  _$ls ->  1
当前 _$mr ->  0  _$ls ->  2
获取 Window 的属性：hp_identifier 值为：undefined
当前 _$mr ->  12  _$ls ->  1
当前 _$mr ->  32  _$ls ->  2
当前 _$mr ->  5  _$ls ->  1
当前 _$mr ->  3  _$ls ->  1
当前 _$mr ->  49  _$ls ->  0
当前 _$mr ->  12  _$ls ->  0
当前 _$mr ->  49  _$ls ->  1
当前 _$mr ->  8  _$ls ->  2
当前 _$mr ->  12  _$ls ->  0
当前 _$mr ->  12  _$ls ->  1
当前 _$mr ->  48  _$ls ->  2
当前 _$mr ->  0  _$ls ->  3
当前 _$mr ->  38  _$ls ->  2
当前 _$mr ->  12  _$ls ->  3
当前 _$mr ->  48  _$ls ->  4
当前 _$mr ->  0  _$ls ->  5
当前 _$mr ->  1  _$ls ->  4
当前 _$mr ->  56  _$ls ->  1
当前 _$mr ->  48  _$ls ->  0
当前 _$mr ->  56  _$ls ->  1
当前 _$mr ->  31  _$ls ->  0
当前 _$mr ->  38  _$ls ->  1
当前 _$mr ->  12  _$ls ->  2
当前 _$mr ->  48  _$ls ->  3
当前 _$mr ->  0  _$ls ->  4
当前 _$mr ->  0  _$ls ->  3
当前 _$mr ->  52  _$ls ->  2
当前 _$mr ->  3  _$ls ->  1
当前 _$mr ->  38  _$ls ->  0
当前 _$mr ->  38  _$ls ->  1
当前 _$mr ->  31  _$ls ->  2
当前 _$mr ->  0  _$ls ->  3
当前 _$mr ->  0  _$ls ->  2
获取 Window 的属性：appScanClick 值为：undefined
当前 _$mr ->  12  _$ls ->  1
当前 _$mr ->  32  _$ls ->  2
当前 _$mr ->  3  _$ls ->  1
当前 _$mr ->  24  _$ls ->  0
当前 _$mr ->  55  _$ls ->  0
当前 _$mr ->  20  _$ls ->  0
当前 _$mr ->  31  _$ls ->  0
当前 _$mr ->  38  _$ls ->  1
当前 _$mr ->  12  _$ls ->  2
当前 _$mr ->  48  _$ls ->  3
当前 _$mr ->  0  _$ls ->  4
当前 _$mr ->  0  _$ls ->  3
当前 _$mr ->  52  _$ls ->  2
当前 _$mr ->  3  _$ls ->  1
当前 _$mr ->  38  _$ls ->  0
当前 _$mr ->  38  _$ls ->  1
当前 _$mr ->  31  _$ls ->  2
当前 _$mr ->  0  _$ls ->  3
当前 _$mr ->  0  _$ls ->  2
获取 Window 的属性：appScanFocusOut 值为：undefined
当前 _$mr ->  12  _$ls ->  1
当前 _$mr ->  32  _$ls ->  2
当前 _$mr ->  3  _$ls ->  1
当前 _$mr ->  24  _$ls ->  0
当前 _$mr ->  55  _$ls ->  0
当前 _$mr ->  20  _$ls ->  0
当前 _$mr ->  31  _$ls ->  0
当前 _$mr ->  38  _$ls ->  1
当前 _$mr ->  12  _$ls ->  2
当前 _$mr ->  48  _$ls ->  3
当前 _$mr ->  0  _$ls ->  4
当前 _$mr ->  0  _$ls ->  3
当前 _$mr ->  52  _$ls ->  2
当前 _$mr ->  3  _$ls ->  1
当前 _$mr ->  38  _$ls ->  0
当前 _$mr ->  38  _$ls ->  1
当前 _$mr ->  31  _$ls ->  2
当前 _$mr ->  0  _$ls ->  3
当前 _$mr ->  0  _$ls ->  2
获取 Window 的属性：appScanKeyDown 值为：undefined
当前 _$mr ->  12  _$ls ->  1
当前 _$mr ->  32  _$ls ->  2
当前 _$mr ->  3  _$ls ->  1
当前 _$mr ->  24  _$ls ->  0
当前 _$mr ->  55  _$ls ->  0
当前 _$mr ->  20  _$ls ->  0
当前 _$mr ->  31  _$ls ->  0
当前 _$mr ->  38  _$ls ->  1
当前 _$mr ->  12  _$ls ->  2
当前 _$mr ->  48  _$ls ->  3
当前 _$mr ->  0  _$ls ->  4
当前 _$mr ->  0  _$ls ->  3
当前 _$mr ->  52  _$ls ->  2
当前 _$mr ->  3  _$ls ->  1
当前 _$mr ->  38  _$ls ->  0
当前 _$mr ->  38  _$ls ->  1
当前 _$mr ->  31  _$ls ->  2
当前 _$mr ->  0  _$ls ->  3
当前 _$mr ->  0  _$ls ->  2
获取 Window 的属性：appScanKeyUp 值为：undefined
当前 _$mr ->  12  _$ls ->  1
当前 _$mr ->  32  _$ls ->  2
当前 _$mr ->  3  _$ls ->  1
当前 _$mr ->  24  _$ls ->  0
当前 _$mr ->  55  _$ls ->  0
当前 _$mr ->  20  _$ls ->  0
当前 _$mr ->  31  _$ls ->  0
当前 _$mr ->  38  _$ls ->  1
当前 _$mr ->  12  _$ls ->  2
当前 _$mr ->  48  _$ls ->  3
当前 _$mr ->  0  _$ls ->  4
当前 _$mr ->  0  _$ls ->  3
当前 _$mr ->  52  _$ls ->  2
当前 _$mr ->  3  _$ls ->  1
当前 _$mr ->  38  _$ls ->  0
当前 _$mr ->  38  _$ls ->  1
当前 _$mr ->  31  _$ls ->  2
当前 _$mr ->  0  _$ls ->  3
当前 _$mr ->  0  _$ls ->  2
获取 Window 的属性：appScanSendReplacement 值为：undefined
当前 _$mr ->  12  _$ls ->  1
当前 _$mr ->  32  _$ls ->  2
当前 _$mr ->  3  _$ls ->  1
当前 _$mr ->  24  _$ls ->  0
当前 _$mr ->  55  _$ls ->  0
当前 _$mr ->  20  _$ls ->  0
当前 _$mr ->  31  _$ls ->  0
当前 _$mr ->  38  _$ls ->  1
当前 _$mr ->  12  _$ls ->  2
当前 _$mr ->  48  _$ls ->  3
当前 _$mr ->  0  _$ls ->  4
当前 _$mr ->  0  _$ls ->  3
当前 _$mr ->  52  _$ls ->  2
当前 _$mr ->  3  _$ls ->  1
当前 _$mr ->  38  _$ls ->  0
当前 _$mr ->  38  _$ls ->  1
当前 _$mr ->  31  _$ls ->  2
当前 _$mr ->  0  _$ls ->  3
当前 _$mr ->  0  _$ls ->  2
获取 Window 的属性：appScanOnReadyStateChangeReplacement 值为：undefined
当前 _$mr ->  12  _$ls ->  1
当前 _$mr ->  32  _$ls ->  2
当前 _$mr ->  3  _$ls ->  1
当前 _$mr ->  24  _$ls ->  0
当前 _$mr ->  55  _$ls ->  0
当前 _$mr ->  20  _$ls ->  0
当前 _$mr ->  31  _$ls ->  0
当前 _$mr ->  38  _$ls ->  1
当前 _$mr ->  12  _$ls ->  2
当前 _$mr ->  48  _$ls ->  3
当前 _$mr ->  0  _$ls ->  4
当前 _$mr ->  0  _$ls ->  3
当前 _$mr ->  52  _$ls ->  2
当前 _$mr ->  3  _$ls ->  1
当前 _$mr ->  38  _$ls ->  0
当前 _$mr ->  38  _$ls ->  1
当前 _$mr ->  31  _$ls ->  2
当前 _$mr ->  0  _$ls ->  3
当前 _$mr ->  0  _$ls ->  2
获取 Window 的属性：appScanLoadHandler 值为：undefined
当前 _$mr ->  12  _$ls ->  1
当前 _$mr ->  32  _$ls ->  2
当前 _$mr ->  3  _$ls ->  1
当前 _$mr ->  24  _$ls ->  0
当前 _$mr ->  55  _$ls ->  0
当前 _$mr ->  20  _$ls ->  0
当前 _$mr ->  31  _$ls ->  0
当前 _$mr ->  38  _$ls ->  1
当前 _$mr ->  12  _$ls ->  2
当前 _$mr ->  48  _$ls ->  3
当前 _$mr ->  0  _$ls ->  4
当前 _$mr ->  0  _$ls ->  3
当前 _$mr ->  52  _$ls ->  2
当前 _$mr ->  3  _$ls ->  1
当前 _$mr ->  38  _$ls ->  0
当前 _$mr ->  38  _$ls ->  1
当前 _$mr ->  31  _$ls ->  2
当前 _$mr ->  0  _$ls ->  3
当前 _$mr ->  0  _$ls ->  2
获取 Window 的属性：appScanSetPageLoaded 值为：undefined
当前 _$mr ->  12  _$ls ->  1
当前 _$mr ->  32  _$ls ->  2
当前 _$mr ->  3  _$ls ->  1
当前 _$mr ->  24  _$ls ->  0
当前 _$mr ->  55  _$ls ->  0
当前 _$mr ->  20  _$ls ->  0
当前 _$mr ->  31  _$ls ->  0
当前 _$mr ->  38  _$ls ->  1
当前 _$mr ->  12  _$ls ->  2
当前 _$mr ->  48  _$ls ->  3
当前 _$mr ->  0  _$ls ->  4
当前 _$mr ->  0  _$ls ->  3
当前 _$mr ->  52  _$ls ->  2
当前 _$mr ->  3  _$ls ->  1
当前 _$mr ->  3  _$ls ->  1
当前 _$mr ->  12  _$ls ->  0
当前 _$mr ->  24  _$ls ->  1
当前 _$mr ->  90  _$ls ->  1
当前 _$mr ->  31  _$ls ->  0
当前 _$mr ->  49  _$ls ->  1
当前 _$mr ->  8  _$ls ->  2
当前 _$mr ->  3  _$ls ->  1
当前 _$mr ->  31  _$ls ->  0
当前 _$mr ->  49  _$ls ->  1
当前 _$mr ->  8  _$ls ->  2
当前 _$mr ->  3  _$ls ->  1
当前 _$mr ->  31  _$ls ->  0
当前 _$mr ->  49  _$ls ->  1
当前 _$mr ->  8  _$ls ->  2
当前 _$mr ->  3  _$ls ->  1
当前 _$mr ->  31  _$ls ->  0
当前 _$mr ->  49  _$ls ->  1
当前 _$mr ->  8  _$ls ->  2
当前 _$mr ->  3  _$ls ->  1
当前 _$mr ->  31  _$ls ->  0
当前 _$mr ->  49  _$ls ->  1
当前 _$mr ->  8  _$ls ->  2
当前 _$mr ->  3  _$ls ->  1
当前 _$mr ->  31  _$ls ->  0
当前 _$mr ->  49  _$ls ->  1
当前 _$mr ->  8  _$ls ->  2
当前 _$mr ->  3  _$ls ->  1
当前 _$mr ->  31  _$ls ->  0
当前 _$mr ->  49  _$ls ->  1
当前 _$mr ->  8  _$ls ->  2
当前 _$mr ->  3  _$ls ->  1
当前 _$mr ->  31  _$ls ->  0
当前 _$mr ->  49  _$ls ->  1
当前 _$mr ->  8  _$ls ->  2
当前 _$mr ->  3  _$ls ->  1
当前 _$mr ->  31  _$ls ->  0
当前 _$mr ->  49  _$ls ->  1
当前 _$mr ->  8  _$ls ->  2
当前 _$mr ->  3  _$ls ->  1
当前 _$mr ->  31  _$ls ->  0
当前 _$mr ->  49  _$ls ->  1
当前 _$mr ->  8  _$ls ->  2
当前 _$mr ->  3  _$ls ->  1
当前 _$mr ->  31  _$ls ->  0
当前 _$mr ->  49  _$ls ->  1
当前 _$mr ->  8  _$ls ->  2
当前 _$mr ->  3  _$ls ->  1
当前 _$mr ->  31  _$ls ->  0
当前 _$mr ->  49  _$ls ->  1
当前 _$mr ->  8  _$ls ->  2
当前 _$mr ->  3  _$ls ->  1
当前 _$mr ->  31  _$ls ->  0
当前 _$mr ->  49  _$ls ->  1
当前 _$mr ->  8  _$ls ->  2
当前 _$mr ->  3  _$ls ->  1
当前 _$mr ->  31  _$ls ->  0
当前 _$mr ->  49  _$ls ->  1
当前 _$mr ->  8  _$ls ->  2
当前 _$mr ->  3  _$ls ->  1
当前 _$mr ->  31  _$ls ->  0
当前 _$mr ->  49  _$ls ->  1
当前 _$mr ->  8  _$ls ->  2
当前 _$mr ->  3  _$ls ->  1
当前 _$mr ->  31  _$ls ->  0
当前 _$mr ->  49  _$ls ->  1
当前 _$mr ->  8  _$ls ->  2
当前 _$mr ->  3  _$ls ->  1
当前 _$mr ->  31  _$ls ->  0
当前 _$mr ->  49  _$ls ->  1
当前 _$mr ->  8  _$ls ->  2
当前 _$mr ->  3  _$ls ->  1
当前 _$mr ->  31  _$ls ->  0
当前 _$mr ->  49  _$ls ->  1
当前 _$mr ->  8  _$ls ->  2
当前 _$mr ->  3  _$ls ->  1
当前 _$mr ->  31  _$ls ->  0
当前 _$mr ->  49  _$ls ->  1
当前 _$mr ->  8  _$ls ->  2
当前 _$mr ->  3  _$ls ->  1
当前 _$mr ->  31  _$ls ->  0
当前 _$mr ->  49  _$ls ->  1
当前 _$mr ->  8  _$ls ->  2
当前 _$mr ->  3  _$ls ->  1
当前 _$mr ->  31  _$ls ->  0
当前 _$mr ->  49  _$ls ->  1
当前 _$mr ->  8  _$ls ->  2
当前 _$mr ->  3  _$ls ->  1
当前 _$mr ->  31  _$ls ->  0
当前 _$mr ->  49  _$ls ->  1
当前 _$mr ->  8  _$ls ->  2
当前 _$mr ->  3  _$ls ->  1
当前 _$mr ->  31  _$ls ->  0
当前 _$mr ->  49  _$ls ->  1
当前 _$mr ->  8  _$ls ->  2
当前 _$mr ->  3  _$ls ->  1
当前 _$mr ->  31  _$ls ->  0
当前 _$mr ->  49  _$ls ->  1
当前 _$mr ->  8  _$ls ->  2
当前 _$mr ->  3  _$ls ->  1
当前 _$mr ->  31  _$ls ->  0
当前 _$mr ->  49  _$ls ->  1
当前 _$mr ->  8  _$ls ->  2
当前 _$mr ->  3  _$ls ->  1
当前 _$mr ->  31  _$ls ->  0
当前 _$mr ->  49  _$ls ->  1
当前 _$mr ->  8  _$ls ->  2
当前 _$mr ->  3  _$ls ->  1
当前 _$mr ->  31  _$ls ->  0
当前 _$mr ->  49  _$ls ->  1
当前 _$mr ->  8  _$ls ->  2
当前 _$mr ->  3  _$ls ->  1
当前 _$mr ->  31  _$ls ->  0
当前 _$mr ->  49  _$ls ->  1
当前 _$mr ->  8  _$ls ->  2
当前 _$mr ->  3  _$ls ->  1
当前 _$mr ->  31  _$ls ->  0
当前 _$mr ->  49  _$ls ->  1
当前 _$mr ->  8  _$ls ->  2
当前 _$mr ->  3  _$ls ->  1
当前 _$mr ->  31  _$ls ->  0
当前 _$mr ->  49  _$ls ->  1
当前 _$mr ->  8  _$ls ->  2
当前 _$mr ->  3  _$ls ->  1
当前 _$mr ->  31  _$ls ->  0
当前 _$mr ->  49  _$ls ->  1
当前 _$mr ->  8  _$ls ->  2
当前 _$mr ->  3  _$ls ->  1
当前 _$mr ->  31  _$ls ->  0
当前 _$mr ->  49  _$ls ->  1
当前 _$mr ->  8  _$ls ->  2
当前 _$mr ->  3  _$ls ->  1
当前 _$mr ->  31  _$ls ->  0
当前 _$mr ->  49  _$ls ->  1
当前 _$mr ->  8  _$ls ->  2
当前 _$mr ->  3  _$ls ->  1
当前 _$mr ->  31  _$ls ->  0
当前 _$mr ->  49  _$ls ->  1
当前 _$mr ->  8  _$ls ->  2
当前 _$mr ->  3  _$ls ->  1
当前 _$mr ->  31  _$ls ->  0
当前 _$mr ->  49  _$ls ->  1
当前 _$mr ->  8  _$ls ->  2
当前 _$mr ->  3  _$ls ->  1
当前 _$mr ->  31  _$ls ->  0
当前 _$mr ->  49  _$ls ->  1
当前 _$mr ->  8  _$ls ->  2
当前 _$mr ->  3  _$ls ->  1
当前 _$mr ->  31  _$ls ->  0
当前 _$mr ->  49  _$ls ->  1
当前 _$mr ->  8  _$ls ->  2
当前 _$mr ->  3  _$ls ->  1
当前 _$mr ->  31  _$ls ->  0
当前 _$mr ->  49  _$ls ->  1
当前 _$mr ->  8  _$ls ->  2
当前 _$mr ->  3  _$ls ->  1
当前 _$mr ->  3  _$ls ->  1
当前 _$mr ->  12  _$ls ->  0
当前 _$mr ->  49  _$ls ->  1
当前 _$mr ->  8  _$ls ->  2
当前 _$mr ->  12  _$ls ->  0
当前 _$mr ->  12  _$ls ->  1
当前 _$mr ->  48  _$ls ->  2
当前 _$mr ->  0  _$ls ->  3
当前 _$mr ->  38  _$ls ->  2
当前 _$mr ->  12  _$ls ->  3
当前 _$mr ->  48  _$ls ->  4
当前 _$mr ->  0  _$ls ->  5
当前 _$mr ->  1  _$ls ->  4
当前 _$mr ->  56  _$ls ->  1
当前 _$mr ->  48  _$ls ->  0
当前 _$mr ->  56  _$ls ->  1
当前 _$mr ->  31  _$ls ->  0
当前 _$mr ->  38  _$ls ->  1
当前 _$mr ->  12  _$ls ->  2
当前 _$mr ->  48  _$ls ->  3
当前 _$mr ->  0  _$ls ->  4
当前 _$mr ->  0  _$ls ->  3
当前 _$mr ->  52  _$ls ->  2
当前 _$mr ->  3  _$ls ->  1
当前 _$mr ->  38  _$ls ->  0
当前 _$mr ->  38  _$ls ->  1
当前 _$mr ->  31  _$ls ->  2
当前 _$mr ->  0  _$ls ->  3
当前 _$mr ->  0  _$ls ->  2
获取 Window 的属性：spi_hooked 值为：undefined
当前 _$mr ->  12  _$ls ->  1
当前 _$mr ->  32  _$ls ->  2
当前 _$mr ->  3  _$ls ->  1
当前 _$mr ->  24  _$ls ->  0
当前 _$mr ->  55  _$ls ->  0
当前 _$mr ->  20  _$ls ->  0
当前 _$mr ->  31  _$ls ->  0
当前 _$mr ->  38  _$ls ->  1
当前 _$mr ->  12  _$ls ->  2
当前 _$mr ->  48  _$ls ->  3
当前 _$mr ->  0  _$ls ->  4
当前 _$mr ->  0  _$ls ->  3
当前 _$mr ->  52  _$ls ->  2
当前 _$mr ->  3  _$ls ->  1
当前 _$mr ->  38  _$ls ->  0
当前 _$mr ->  38  _$ls ->  1
当前 _$mr ->  31  _$ls ->  2
当前 _$mr ->  0  _$ls ->  3
当前 _$mr ->  0  _$ls ->  2
获取 Window 的属性：mozAnimationStartTime 值为：undefined
当前 _$mr ->  12  _$ls ->  1
当前 _$mr ->  32  _$ls ->  2
当前 _$mr ->  3  _$ls ->  1
当前 _$mr ->  24  _$ls ->  0
当前 _$mr ->  55  _$ls ->  0
当前 _$mr ->  20  _$ls ->  0
当前 _$mr ->  31  _$ls ->  0
当前 _$mr ->  38  _$ls ->  1
当前 _$mr ->  12  _$ls ->  2
当前 _$mr ->  48  _$ls ->  3
当前 _$mr ->  0  _$ls ->  4
当前 _$mr ->  0  _$ls ->  3
当前 _$mr ->  52  _$ls ->  2
当前 _$mr ->  3  _$ls ->  1
当前 _$mr ->  38  _$ls ->  0
当前 _$mr ->  38  _$ls ->  1
当前 _$mr ->  31  _$ls ->  2
当前 _$mr ->  0  _$ls ->  3
当前 _$mr ->  0  _$ls ->  2
获取 Window 的属性：mozIndexedDB 值为：undefined
当前 _$mr ->  12  _$ls ->  1
当前 _$mr ->  32  _$ls ->  2
当前 _$mr ->  3  _$ls ->  1
当前 _$mr ->  24  _$ls ->  0
当前 _$mr ->  55  _$ls ->  0
当前 _$mr ->  20  _$ls ->  0
当前 _$mr ->  31  _$ls ->  0
当前 _$mr ->  38  _$ls ->  1
当前 _$mr ->  12  _$ls ->  2
当前 _$mr ->  48  _$ls ->  3
当前 _$mr ->  0  _$ls ->  4
当前 _$mr ->  0  _$ls ->  3
当前 _$mr ->  52  _$ls ->  2
当前 _$mr ->  3  _$ls ->  1
当前 _$mr ->  38  _$ls ->  0
当前 _$mr ->  38  _$ls ->  1
当前 _$mr ->  31  _$ls ->  2
当前 _$mr ->  0  _$ls ->  3
当前 _$mr ->  0  _$ls ->  2
获取 Window 的属性：mozRequestAnimationFrame 值为：undefined
当前 _$mr ->  12  _$ls ->  1
当前 _$mr ->  32  _$ls ->  2
当前 _$mr ->  3  _$ls ->  1
当前 _$mr ->  24  _$ls ->  0
当前 _$mr ->  55  _$ls ->  0
当前 _$mr ->  20  _$ls ->  0
当前 _$mr ->  31  _$ls ->  0
当前 _$mr ->  38  _$ls ->  1
当前 _$mr ->  12  _$ls ->  2
当前 _$mr ->  48  _$ls ->  3
当前 _$mr ->  0  _$ls ->  4
当前 _$mr ->  0  _$ls ->  3
当前 _$mr ->  52  _$ls ->  2
当前 _$mr ->  3  _$ls ->  1
当前 _$mr ->  3  _$ls ->  1
当前 _$mr ->  54  _$ls ->  0
当前 _$mr ->  3  _$ls ->  1
当前 _$mr ->  12  _$ls ->  0
当前 _$mr ->  49  _$ls ->  1
当前 _$mr ->  0  _$ls ->  2
获取 Window 的属性：Entity 值为：undefined
当前 _$mr ->  17  _$ls ->  1
当前 _$mr ->  3  _$ls ->  1
当前 _$mr ->  12  _$ls ->  0
当前 _$mr ->  49  _$ls ->  1
当前 _$mr ->  0  _$ls ->  2
获取 Window 的属性：QTP_EPE_HOOK 值为：undefined
当前 _$mr ->  57  _$ls ->  1
当前 _$mr ->  12  _$ls ->  0
当前 _$mr ->  49  _$ls ->  1
当前 _$mr ->  0  _$ls ->  2
获取 Window 的属性：__QTP__HOOK_NOTIFIER 值为：undefined
当前 _$mr ->  3  _$ls ->  1
当前 _$mr ->  49  _$ls ->  0
当前 _$mr ->  30  _$ls ->  1
当前 _$mr ->  12  _$ls ->  1
当前 _$mr ->  48  _$ls ->  2
当前 _$mr ->  0  _$ls ->  3
当前 _$mr ->  31  _$ls ->  2
当前 _$mr ->  53  _$ls ->  3
当前 _$mr ->  57  _$ls ->  1
当前 _$mr ->  31  _$ls ->  0
当前 _$mr ->  49  _$ls ->  1
当前 _$mr ->  0  _$ls ->  2
获取 navigator 的属性：languages 值为：undefined
当前 _$mr ->  12  _$ls ->  1
当前 _$mr ->  61  _$ls ->  2
当前 _$mr ->  3  _$ls ->  1
当前 _$mr ->  49  _$ls ->  0
当前 _$mr ->  51  _$ls ->  0
当前 _$mr ->  49  _$ls ->  0
当前 _$mr ->  23  _$ls ->  0
当前 _$mr ->  56  _$ls ->  1
当前 _$mr ->  39  _$ls ->  0
当前 _$mr ->  56  _$ls ->  1
当前 _$mr ->  11  _$ls ->  0
当前 _$mr ->  49  _$ls ->  1
当前 _$mr ->  51  _$ls ->  0
当前 _$mr ->  12  _$ls ->  0
当前 _$mr ->  5  _$ls ->  1
当前 _$mr ->  56  _$ls ->  1
当前 _$mr ->  49  _$ls ->  0
当前 _$mr ->  56  _$ls ->  1
当前 _$mr ->  31  _$ls ->  0
当前 _$mr ->  17  _$ls ->  1
当前 _$mr ->  12  _$ls ->  0
当前 _$mr ->  48  _$ls ->  1
当前 _$mr ->  0  _$ls ->  2
当前 _$mr ->  31  _$ls ->  1
当前 _$mr ->  31  _$ls ->  2
当前 _$mr ->  0  _$ls ->  3
当前 _$mr ->  6  _$ls ->  2
当前 _$mr ->  22  _$ls ->  2
当前 _$mr ->  78  _$ls ->  1
当前 _$mr ->  31  _$ls ->  0
当前 _$mr ->  31  _$ls ->  1
当前 _$mr ->  31  _$ls ->  2
当前 _$mr ->  10  _$ls ->  3
当前 _$mr ->  12  _$ls ->  0
当前 _$mr ->  48  _$ls ->  1
当前 _$mr ->  0  _$ls ->  2
当前 _$mr ->  31  _$ls ->  1
当前 _$mr ->  14  _$ls ->  2
当前 _$mr ->  56  _$ls ->  1
当前 _$mr ->  31  _$ls ->  0
当前 _$mr ->  17  _$ls ->  1
当前 _$mr ->  49  _$ls ->  0
当前 _$mr ->  11  _$ls ->  0
当前 _$mr ->  56  _$ls ->  1
当前 _$mr ->  49  _$ls ->  0
当前 _$mr ->  31  _$ls ->  1
当前 _$mr ->  14  _$ls ->  2
当前 _$mr ->  5  _$ls ->  1
当前 _$mr ->  58  _$ls ->  1
当前 _$mr ->  5  _$ls ->  1
当前 _$mr ->  3  _$ls ->  1
当前 _$mr ->  49  _$ls ->  0
当前 _$mr ->  30  _$ls ->  1
当前 _$mr ->  49  _$ls ->  1
当前 _$mr ->  56  _$ls ->  0
当前 _$mr ->  49  _$ls ->  -1(可定位)
当前 _$mr ->  30  _$ls ->  0
当前 _$mr ->  49  _$ls ->  0
TypeError: Cannot read properties of undefined
_$dT 为 undefined，无法执行 tostring方法
